param memcpy_params: comptime_struct;

// Matrix dimensions
param M: i16;
param N: i16;
param K: i16;

// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// 48 kB of global memory contain A, B, C
var A = @zeros([M*K]f32); // A is M x K
var B = @zeros([K*N]f32); // B is K x N
var C = @zeros([M*N]f32); // C is M x N

// ptrs to A, B, C will be advertised as symbols to host
var A_ptr: [*]f32 = &A;
var B_ptr: [*]f32 = &B;
var C_ptr: [*]f32 = &C;


// [ c0 c1 ] = [ a0 a1 ] * [ b0 b1 ]
// [ c2 c3 ]   [ a2 a3 ]   [ b2 b3 ]

// Compute matmul C = A * B + C
fn compute_gemm() void {
    // Access 0th column of A
    var A_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> A[i] });

    // loop over K columns of A
    for (@range(i16, K)) |k| {
        // Access 0th column of C
        var C_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> C[i] });

        // for kth row of B, loop over N elements
        for (@range(i16, N)) |j| {
            // Get element B[k,j]
            const b = B[j*K + k];

            // increment nth column of C by A_k * B_k,j
            @fmacs(C_dsd, C_dsd, A_dsd, b);

            // point C_dsd to next column
            C_dsd = @increment_dsd_offset(C_dsd, M, f32);
        }
        // point A_dsd to next column
        A_dsd = @increment_dsd_offset(A_dsd, M, f32);
    }

    // exit function
    sys_mod.unblock_cmd_stream();
}

comptime {
    @export_symbol(A_ptr, "A");
    @export_symbol(B_ptr, "B");
    @export_symbol(C_ptr, "C");
    @export_symbol(compute_gemm);
}
